1:"$Sreact.fragment"
2:I[9825,[],"ClientSegmentRoot"]
3:I[4660,["999","static/chunks/999-576d842e6cd294db.js","177","static/chunks/app/layout-6d3cda0748ef6b14.js"],"default"]
4:I[4922,[],""]
5:I[3720,[],""]
7:I[6373,["188","static/chunks/188-97e865611bdff4a9.js","831","static/chunks/app/blog/page-5334eb27a045cd16.js"],"default"]
10:I[2466,[],"MetadataBoundary"]
12:I[2466,[],"OutletBoundary"]
15:I[6114,[],"AsyncMetadataOutlet"]
17:I[2466,[],"ViewportBoundary"]
19:I[4797,[],""]
:HL["/_next/static/css/5e939c89cae1ea87.css","style"]
:HL["/_next/static/css/a03c659049eed7e4.css","style"]
8:T6e3,20240718
Dance
# Archeology
I have been dancing for 13 years, and my interest in dance has evolved over time. Each period has brought a different goal:

## For Coolness
During high school, my primary motivation was to be cool. This was the most intense period of my dance life. I practiced hard and danced aggressively during battles.

## Self-Doubt
One day, a senior told me, "I'm not sure you are a popper if you don't dance hit." This statement had a significant impact on me, causing me to question my style: "What do I want to be? What do I really want?"

## For Personal Style
At some point, I discovered something interesting: why do some dancers look so unique? When they dance, I can tell who they are without seeing their faces. This realization encouraged me a lot. I started dancing for my own style, regardless of whether it was popping, hip-hop, or something else.

## Dancing for Quality
What is quality? Have you ever felt that an action matches a sound perfectly? I can recommend some videos with dance, but don't watch them as dance—just move. For example, check out this video. Is it nice? Just a little bit of movement can fit any sound perfectly, giving me goosebumps. This is what I strive for now: "When I dance, I am music." When I hear music or sounds, a movie emerges in my mind, becoming my teacher.

## Contradiction
Despite dancing for many years, I have a problem. I always have a teacher in my mind, setting high standards for how I perceive dance. As a result, I rarely watch myself dance. No matter how good someone else thinks it is, I always find many flaws.

# Now and future
This is my journey. Now, I need to work, so I can't dance as often, but I will dance anytime—while walking, at home, everywhere. Because I love it.9:T514,20240725
Software
# Gorm doesn't support distributed transaction
## Origin
One day, I find the something code in our project:
```
# Go
dbs.Transaction(func(dbs map[string]*gorm.DB){
  dbs[A].xxxx
  dbs[B].xxxx
})
```
Cool! I can't help but think about:
The senior is powerful, how did he make gorm.Dbs in same transaction?

Let's deep into dbs.Transaction,
```
# Go
// I expand it for readibility
dbs[A].Transaction(func(txA *gorm.DB) error {
  if err = dbs[B].Transaction(func(txB *gorm.DB) error {
    // The func(dbs map[string]*gorm.DB){} actions
    if err = txA.xxx(); err != nil{
      return err
    }
    if err = txB.xxx(); err != nil{
      return err
    }
  }); err != nil{
    return err
  }
})
```
When I first see it, it seems make sense, if some action failed, all dbs will rollback. 

But, if network failures occur between two db commit?

## Problem
A transaction has 3 steps:
1. Begin transaction(Lock)
2. Perform Operation(Prepare)
3. Commit or Rollback Transaction(Release lock)

Consider our case:
1. Begin transaction A
2. Begin transaction B
3. Perform A and B actions
4. Commit B
5. Commit A

If network failures between step4 and step5, this casue the intermediate state:
- Action B is commit but A will not
- Action B release the lock can be accessed by other transactionsa:T717,20240914
Software
# Motivation
I had a discussion about git flow with colleague recently.

I suggested a test flow:

1. Backend develop the feature and build to image.
2. Frontend run the backend's image on local and develop the frontend feature.

I don't talk about the pros and cons here, but this suggesion is rejected by my colleague, who thinks it violates the "separation of frontend and backend" because frontend need to run it on his own machine.

So, I asked the chatGPT, it's answer is:

Does this violate the separation of backend and frontend?

Not necessarily. Here's why:
Frontend-Backend separation typically refers to keeping the codebases, responsibilities, and concerns distinct. Frontend deals with user interfaces and interaction, while backend focuses on business logic, databases, and APIs.
In your scenario, the codebases are still separate, and each team is responsible for its respective part (frontend or backend).


That is what I think, but in fact, those all are conventions, not absolutely. So I can understand the difference about the boundaries of frontend and backend.

# Ideal vs Realistic
In my career, I have been working on three companies. Exactly, The three companies has three different scales:
- Large scale company: The division of labor is clear, I only do what I need to do.
- Medium scale company: Not just do my work, sometimes I need to do something with DevOps or QA instead of backend, but seldom.
- Small scale company: Because of the lack of some position, I do more things with DevOps, QA, PM...etc.

Why I talk about this?

In Software Engineering, we often need to think about "trade-off", for those philosophy proposed by pioneers, we need to realize its origin, and compare with current environment instead of pursuit blindly.

# Do best choice in the moment
b:T1614,20240725
Software

# Because composition is superior to inheritance

We have a duck and a chicken, and they work well. We noticed that ducks and chickens share many similarities—they both fly, they each have two legs and two wings, and they make sounds like "quack" or "cluck." So, we abstracted a parent class called Bird, from which both Duck and Chicken inherited. Then, when we wanted to add extra behavior for flying, we only needed to change the Bird class; the code was reduced and seemed easier to maintain. The Bird class worked great.

But as our business expanded, penguins appeared. Penguins can’t fly, though they can swim. Suddenly, the design of Bird ran into problems, so we “pushed down” the flying functionality into a subclass for birds that do fly, with penguins inheriting from a non-flying bird class. Next came the rubber duck—the debate sparked: Is it a bird or not? People wasted a lot of time arguing about what exactly a bird is and what a bird should do.

However, there are no birds in our everyday life (please note this important point); Bird is just an abstraction. In real life, we have chickens and ducks. We thought they shared some common characteristics, so we labeled those commonalities as “bird,” but we can never be sure if the next animal we encounter should be considered a bird or whether the definition of bird should be changed. This is why inheritance becomes problematic. Let’s consider what composition would look like:

We identified the common factors of chickens and ducks—flying, two legs, two wings, and the ability to make noise. These properties, plus other characteristics, can be composed to form a chicken or a duck. The flying capability can be extracted and used everywhere flying is required. When I encounter a penguin, I don’t compose it with flying. The ability to fly shouldn’t be something inherited by chickens or ducks from a parent class; instead, it should be one of the composable parts that make up a chicken or a duck.

This issue arises from poor abstraction skills and falling into one’s own logical trap. Bird is, by nature, a symbol representing a combination of specific functions. So why force a penguin, which doesn’t fly, to inherit from Bird? That isn’t the “original sin” of inheritance—in fact, the JDK code doesn’t have that same flaw. It’s just that as projects evolve, inheritance needs timely refactoring, which is very hard to achieve, leading to its eventual abuse and a result that is increasingly unrecognizable.

In a sense, inheritance is the original sin—it reverses the relationship between things and the characteristics they share. Instead of one thing deriving from the form of another, it should be that the common characteristics of things are summarized into an abstract form. Inheritance then simply makes things inherit from a base class (an abstract form), which is a reversal of the natural order.

The principle of inheritance is: only when something truly is a particular thing should it inherit from that thing (the is-a relationship). Is a penguin a bird? Is a square a rectangle? These are classic debates, yet in actual development, you waste a lot of time trying to decide whether something really is an is-a relationship, often making wrong assumptions.

Where do all these reasons come from? Even if composition is indeed superior to inheritance, why not provide both composition and inheritance, letting programmers choose for themselves instead of having the language designer decide based on personal taste?

In reality, language designers are often lazy—they don’t want to provide too many features or let programmers decide. For example, Java’s implicit message is: “You lot won’t master pointers, so I won’t provide them (even though Go does).” Similarly, operator overloading is left out because, in their view, you won’t learn to use it properly; and if you can’t handle multiple inheritance, then stick with single inheritance, and so on.

Rust takes a different approach: since you’re likely to make memory leaks, it enforces strict lifetimes to pin you down; if you can’t manage inheritance properly (something Java still allows), then Rust simply forbids it; and when it comes to multithreading, since programmers are prone to mistakes, it enforces strict lifetimes to prevent common errors.

C/C++, on the other hand, goes to the opposite extreme: “You’re all experienced programmers, so I’ll give you every feature you ask for. The more functionality, the better. I’ll provide every concept imaginable—if you run into problems composing those concepts, that’s on you.” Even syntactic sugar has increased over time (for example, C++17’s structured bindings are a clear example).

In real-world projects, I’ve seen many developers implement a “dummy” flying function for penguins just to get the code running, and then they tell testers, “Well, penguins can’t fly; even if we let them fly, nothing will happen.”

Complexity never disappears—it merely shifts. With inheritance, you might end up with a base class containing millions of interfaces. With composition, you only implement the minimal interfaces you need; and if reusability is possible, you don’t even need to implement them, nor do you have to worry about issues like multiple inheritance or the diamond problem.

The problem with object-oriented programming languages is that they always come with an implicit context. You ask for a banana, but what you get is a gorilla holding the banana—and the entire jungle along with it.
— Joe Armstrong (creator of Erlang)c:T8e9,Go’s design choices prioritize simplicity and concurrency, which is why it adopts interfaces over traditional object-oriented inheritance. Here’s a breakdown of why Go uses interfaces with structs and the pros and cons of this approach:

Why Go Uses Interfaces with Structs
Composition over Inheritance: Go emphasizes composition rather than inheritance, meaning instead of creating class hierarchies, functionality is combined by embedding types. This keeps code modular, straightforward, and reduces dependency chains.

Implicit Interface Satisfaction: In Go, any type automatically satisfies an interface if it implements the methods required by that interface, even without explicit declarations. This flexibility allows for cleaner, more decoupled code.

Encouraging Interface-Driven Design: Go encourages designing around behavior (interfaces) rather than types, which is more aligned with loosely coupled system architecture—especially useful for testing and dependency injection.

Pros and Cons of Interfaces in Go
Pros:
Simplicity: Code becomes more readable and easier to maintain without complex hierarchies.
Flexibility: By decoupling method requirements from concrete types, interfaces enable more modular and testable code.
Concurrency-Ready: With Go’s lightweight goroutines, struct and interface combinations better facilitate parallelism than traditional OO inheritance might.
Clear Contracts: Interfaces provide clear contracts for what methods are available, making the code easier to reason about.
Cons:
Limited Reuse: Without inheritance, there can be less code reuse for shared behaviors, requiring more effort to implement functionality in some cases.
Less Familiarity: For those with a background in OO languages, Go’s lack of inheritance might feel limiting or lead to code that doesn’t leverage Go’s idioms.
Boilerplate for Complex Applications: For very large applications, the lack of inheritance might result in some repeated code that OO languages could handle with shared parent classes.
Overall, Go’s design around interfaces and structs complements its focus on simplicity, efficiency, and concurrency, making it ideal for modern, high-performance applications, but it can be a bit unconventional for developers from OO backgrounds.d:T73e,20240713
Life
# Why I choose Go with Nextjs?
In fact, I have learned a lot of languages.
- Python(ML), C, a little Java on my master
- Nodejs, a little Go, Python on my 1st job
- Python(automation) in 2nd job
- Python, C++, Go, at Leetcode
- Go, PHP in current job

As I even said, it doesn't have best choice, when I study in master, I always do algorithm and DSA optimizations compared with my classmates, it gives me more confidence and pleasure, so at that time, I focus on the low layer langage like C, C++, which has more flexibility for developers.

But for the job, we can't always write best optimize code or use low level language, we need to consider more and more factors like develop speed, learning curve, maintance...etc.

I will briefly explain the reason of my choice between those
## C(C++)
Dev slowly, steep learning curve, not fit for most fast-delivery jobs, but good to develop infrastructure
## Java
Compare with Go, has almost the same performance, but JVM memory cost may not fit microservices, and sometimes OOP is not required, and, the code is too long, like 
System.out.println...
## Python
Easily dev, test, but lots of syntactic sugar makes it hard to maintain, one developer one style, and its performance with GIL is not fit the sometging backend server.
## Nodejs
Its the second choice for me, because it is suitable for fullstack development, even though it using event-loop, but also has better performance for most IO-bound env.
## Go
Simplicity is beautiful, syntax consistency, static type maintainable, easily to do concurrent things, make me focus on bussiness logic.
## Vue
Simplicity, but less market share than React
## React
Market share better than Vue
## Nextjs
It is the fullstack framework, for simple environments, I can only use nextjs to do all, but also can combine with Go for high-resource demand


e:T77f,20240725
Software
# Problem
During my work experience, I've encountered several issues related to the principle of having a single source of truth:

1. Duplicated Data: Two different services store the same account information in their own databases. This can lead to data inconsistency when network connectivity is unavailable.
2. Redundant Data Columns: For example, a review item might have columns like OperatorID (UUID), Accept (boolean, with false as default), and Reviewed (boolean). If OperatorID and Accept are sufficient to determine the review status, having an additional Reviewed column introduces redundancy and inconsistencies.

# Benefit about single truth
The single source of truth concept means that each piece of data should be stored only once. For instance, in Scenario 2, using only OperatorID and Accept would be sufficient, making the Reviewed column redundant. By relying on OperatorID, you can determine the review status directly and avoid inconsistencies like Accept = true but Reviewed = false.

Single source of truth simplifies data management and ensures consistency, reducing the likelihood of encountering conflicting information.

# Should Everything Respect Single Source of Truth?
No, single truth make things simple and ensures consistentency, but it may not fit some cases like:

- Content Delivery Networks (CDNs): These are used to improve availability and performance and might require data duplication across multiple locations.
- Readability and Performance: In some cases, having redundant data might improve readability or performance, making it easier to access or process certain information.

This is trade-off, I can't tell you which method is better because not all things have explicit answers. While single source of truth is a valuable concept, it's important to evaluate whether it fits your particular use case and weigh the benefits against potential drawbacks.f:T7d1,20240725
Software
# What is transaction?
A transaction is a concept used to ensure the atomicity of a set of operations. This means that a transaction can only have two states: either all operations are completed successfully (commit), or none of them are (rollback).
# Why is transaction so importanct?
Jimmy has accounts A and B in the same bank. One day, Jimmy wants to transfer $100 from account A to account B. This involves two steps:

1. Decrease $100 from account A.
2. Increase $100 in account B.
It seems simple, right?

But if we don't ensure that both steps are part of the same transaction, and step 1 succeeds but step 2 fails due to an error, what happens?

A major problem arises! The $100 disappears, which could lead to even more severe issues.
# Why are distributed transactions so hard?
There are many factors across different services that can cause problems, such as network issues, storage failures, and system crashes. These factors can lead to many uncertain states, making it difficult to ensure that all parts of the transaction either commit or roll back together.
# How to solve that?
There are several methods to handle distributed transactions, such as WAL (Write-Ahead Logging), 2PC (Two-Phase Commit), and versioning. However, these methods may introduce other problems, like performance issues. You need to choose the approach based on your specific use case.

Here are some suggestions:
- If the load is not too high: Avoid using microservices and multiple databases. While these approaches offer advantages like scalability, they also introduce complexity.
- If you need to use microservices or multiple databases: Carefully separate the use cases and database schemas to ensure that a set of operations is handled within the same service or database whenever possible.
- If you must handle transactions across multiple services and databases: Implement a compensation mechanism to address failures. However, be aware that this will add complexity to your system.

0:{"P":null,"b":"BHBuqg76RnnMCPJTCrvf-","p":"","c":["","blog"],"i":false,"f":[[["",{"children":["blog",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e939c89cae1ea87.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L2",null,{"Component":"$3","slots":{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]},"params":{},"promise":"$@6"}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","section",null,{"className":"h-full","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L7",null,{"stories":[{"title":"About Clean architecture","content":"20240720\nSoftware\n\nBefore I really use Go in work, I learned Go by myself and also Read something relative knowledge like TDD or clean architecture.\n\nMost things seems beautiful!\n\nThey use a lot of philosophies like dependency injection to make all things clean, decouple, and testable.\nBut, when I really using in work, most project will not give you enough time to implement that. Even, we only use api test instead of unit test, integration test...etc.\nThat is what I really say: No one is best\n","date":"","topic":""},{"title":"Begining","content":"20240712\nLife\n\nFrom I become an SWE, I always ask a lot of questions, and try a lot of new things.\nMost of them make me surprise!!\n\nTrade off, a beautiful word, it tells me, in software engineering or more, there is not best solution, but better.\n\nWhy?\n\nFor instance, if we want to go to some place, we know that the plane has the best velocity, but, take a plain will cost more money, more time to check-in, ...etc.\nIn software engineering, a lot of design is to make sure the decoupling or flexibility, but it also increases the complexity.\n\nSo, it is 'Trade off', we must choose a better descision based on current environment.\nThis is all I start for, I was obsessed about those philosophy, why they design it, or this design can solve which problem, it's amazing!\n","date":"","topic":""},{"title":"Dance: My Journey","content":"$8","date":"","topic":""},{"title":"Gorm transation","content":"$9","date":"","topic":""},{"title":"Hard choice","content":"20240720\nSoftware\nIf you found some colleagues didn't follow the rule, and it will cause not small problems oneday, but they know only you know this thing, when communicating with them invalid.\nWill you:\nFor project better, telling the senior or leader?\nOr\nLike most workers, protect yourself?\n\nDebuging software become easy now XD\n","date":"","topic":""},{"title":"Ideal vs Reality","content":"$a","date":"","topic":""},{"title":"Inherit Vs Composition","content":"$b","date":"","topic":""},{"title":"Interface vs OO","content":"$c","date":"","topic":""},{"title":"Language choice","content":"$d","date":"","topic":""},{"title":"Learn Nextjs","content":"20241025\nSoftware\n# Nextjs is hard for newcomer of frontend\nNextjs design lots of technical and architecture to optimize, like SSR, ISR, client-server side...\n\nIt is flexible for building the optimized, static frontend or fullstack service, but also hard to learn.\n\nSo, if you are not familiar with basic concept about frontend(HTML, CSS, Javascipt), directly use nextjs will give you lots of frustration.\n\nDon't do it like me, HAHAHA.","date":"","topic":""},{"title":"Motivation","content":"20240713\nLife\n# Why I start a blog?\n- I want to learn English, so I want a blog to write something with English\n- When I have something interesting thing want to share with others, I want to record it.\n- Learning frontend\n- This is also my resume\n\nAs I think, the most website like linkedin, cake, 104...etc, cannot completely show candidate's resume, especially for fresh.\n## You get what you see\nIt's a cool thing, right?","date":"","topic":""},{"title":"Single truth","content":"$e","date":"","topic":""},{"title":"Thinking before coding","content":"20240726\nSoftware\n# Understand reason\nThe charming of SWE for me is: each design depends on some reason, so called 'Philosophy'.\n\nWhy is it so important?\n\nI read a lot of code with bad sturct or design or document.\n\nFor example:\n## Use lots of any and interface in Go\nGo is a static type language, while static type makes it memory-efficient and easy to maintain and use. \nHowever, you can also define your parameters as any type, but, if any in too many places, it will seems like dynamic type language, if you don't handle any case or support explicit description, it will make other developers hardly to use it, and also lose the advantage of static type language.\n\n","date":"","topic":""},{"title":"Transaction","content":"$f","date":"","topic":""},{"title":"Transaction sequence","content":"20240724\nSoftware\n# Why need sequential transaction?\nConsider the following case:\n\nWe have 3 dbs: A, B\nAnd Two usecases: g, h, each usecase also use A and B dbs.\n\nIf someone code like:\n```\n// usecase g\nA.Transaction(){\n  B.Transaction(){}\n}\n\n// usecase h\nB.Transaction(){\n  A.Transaction(){}\n}\n```\n\n# Deadlock problem\nIf g locked the A, at the same time, h locked the B, now g is waiting for B's lock and h also waits for A's too. Looks like two cars drived reversed direction at the same road which only can bypass by one. If all is waiting each other, all things worse.\n\n# Solution\nI support a easy solution: all usecases must lock dbs in same sequence, just looks like we limit the road only can drive in one direction.\n\n[See the Go example](https://github.com/skyrocketOoO/GoUtils/blob/main/SequenceTransaction/SequenceTransaction.go)\n\n","date":"","topic":""}]}],["$","$L10",null,{"children":"$L11"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a03c659049eed7e4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L12",null,{"children":["$L13","$L14",["$","$L15",null,{"promise":"$@16"}]]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","hhNxtT0MuTovm8B2XiGLZ",{"children":[["$","$L17",null,{"children":"$L18"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$19","$undefined"],"s":false,"S":true}
1a:"$Sreact.suspense"
1b:I[6114,[],"AsyncMetadata"]
6:{}
11:["$","$1a",null,{"fallback":null,"children":["$","$L1b",null,{"promise":"$@1c"}]}]
14:null
18:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
13:null
1c:{"metadata":[],"error":null,"digest":"$undefined"}
16:{"metadata":"$1c:metadata","error":null,"digest":"$undefined"}
